# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: User Service CI Pipeline

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: chrisp1985_ecr_docker_repo
  ECR_REPOSITORY_URI: 195571588534.dkr.ecr.eu-west-2.amazonaws.com/chrisp1985_ecr_docker_repo
  IMAGE_NAME: user-service-docker-image

jobs:
  build_and_deploy:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'


      # Build the Spring API image.
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build dockerBuildImage

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: chrisp1985_ecr_docker_repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT    


    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0


  deploy:
    runs-on: ubuntu-latest
    needs: build_and_deploy  # Ensures that the build job completes successfully first

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6  # Specify the Terraform version you need

      # Step 3: Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure

      # Step 4a: Plan Terraform
      - name: Terraform Plan
        id: tf-plan
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_ACCESS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CONFLUENT_KEY: ${{secrets.CLUSTER_API_KEY}}
          CONFLUENT_SECRET: ${{secrets.CLUSTER_API_SECRET}}
          SCHEMA_API_KEY: ${{secrets.SCHEMA_API_KEY}}
          SCHEMA_API_SECRET: ${{secrets.SCHEMA_API_SECRET}}
          IMAGE_TAG: ${{github.sha}}
        run: |
          export exitcode=0
          terraform plan \
          -var "aws_access_key=$AWS_ACCESS_KEY" \
          -var "aws_access_secret=$AWS_ACCESS_SECRET" \
          -var "confluent_key=$CONFLUENT_KEY" \
          -var "confluent_secret=$CONFLUENT_SECRET" \
          -var "confluent_schema_key=$SCHEMA_API_KEY" \
          -var "confluent_schema_secret=$SCHEMA_API_SECRET" \
          -var "image_tag=$IMAGE_TAG" \
          -out=tfplan || export exitcode=$?
          
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
        working-directory: ./infrastructure

      # Step 5: Apply Terraform configuration
      - name: Terraform Apply
        id: apply
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_ACCESS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CONFLUENT_KEY: ${{ secrets.CLUSTER_API_KEY }}
          CONFLUENT_SECRET: ${{ secrets.CLUSTER_API_SECRET }}
          SCHEMA_API_KEY: ${{secrets.SCHEMA_API_KEY}}
          SCHEMA_API_SECRET: ${{secrets.SCHEMA_API_SECRET}}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          terraform apply -auto-approve tfplan
        working-directory: ./infrastructure

      - name: Capture Lead Time for Changes
        id: capture-ltc
        run: |
            # Get commit timestamp from GitHub API
            COMMIT_TIME=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}" | jq -r '.commit.author.date')
    
            # Get deployment completion time (current timestamp)
            DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
    
            # Convert timestamps to seconds since epoch
            COMMIT_TS=$(date -d "$COMMIT_TIME" +%s)
            DEPLOY_TS=$(date -d "$DEPLOY_TIME" +%s)
    
            # Calculate Lead Time in seconds
            LEAD_TIME=$((DEPLOY_TS - COMMIT_TS))
    
            echo "Commit Time: $COMMIT_TIME"
            echo "Deployment Time: $DEPLOY_TIME"
            echo "Lead Time: $LEAD_TIME seconds"
    
            # Store for later use
            echo "lead_time=$LEAD_TIME" >> $GITHUB_ENV