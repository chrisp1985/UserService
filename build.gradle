import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask
import com.github.davidmc24.gradle.plugin.avro.ResolveAvroDependenciesTask

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.bmuschko.docker-spring-boot-application' version '9.4.0'
	id 'jacoco'
	id "com.github.davidmc24.gradle.plugin.avro" version '1.9.1'
}

group = 'com.chrisp1985'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

sourceSets {
	integrationTest {
		compileClasspath += sourceSets.main.output + sourceSets.test.output
		runtimeClasspath += sourceSets.main.output + sourceSets.test.output
	}
	main {
		java {
			srcDirs += 'build/generated-main-avro-java'
		}
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url 'https://packages.confluent.io/maven/'
	}
	maven {
		url "https://plugins.gradle.org/m2/"
	}
}

avro {
	gettersReturnOptional = true
	optionalGettersForNullableFieldsOnly = true
}

ext {
	set('springCloudVersion', "2023.0.3")
}

dependencies {
	// Kafka
	implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.4.0'

	// Spring Kafka
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'io.confluent:kafka-avro-serializer:7.7.1'
	implementation 'org.apache.avro:avro:1.11.3'
	implementation 'io.confluent:kafka-avro-serializer:7.3.2'

	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework:spring-webflux'

	// Observability
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// Lombok
	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'

	// Prometheus client and PushGateway dependencies
	implementation 'io.prometheus:simpleclient:0.16.0'
	implementation 'io.prometheus:simpleclient_pushgateway:0.16.0'

	// Jsoup dependency for parsing HTML
	implementation 'org.jsoup:jsoup:1.15.3' // or the latest version

	// Test
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner:4.2.0'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.prometheus:simpleclient:0.16.0'
	testImplementation 'io.prometheus:simpleclient_hotspot:0.16.0'
	testImplementation 'io.prometheus:simpleclient_servlet:0.16.0'
	testImplementation 'io.prometheus:simpleclient_httpserver:0.16.0'
	testImplementation 'io.prometheus:simpleclient_pushgateway:0.16.0'

	// IntegrationTest
	integrationTestImplementation 'org.springframework.kafka:spring-kafka'
	integrationTestImplementation 'io.confluent:kafka-avro-serializer:7.7.1'
	integrationTestImplementation 'org.springframework.kafka:spring-kafka-test'
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
	integrationTestImplementation 'io.rest-assured:rest-assured'
	integrationTestImplementation 'io.rest-assured:json-schema-validator:5.5.0'
	integrationTestImplementation 'org.testcontainers:testcontainers:1.20.4'
	integrationTestImplementation 'org.testcontainers:kafka:1.20.3'
	integrationTestImplementation 'org.testcontainers:junit-jupiter:1.20.3'
	integrationTestImplementation 'io.micrometer:micrometer-registry-prometheus'
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-actuator'
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-web'

	integrationTestImplementation 'io.prometheus:simpleclient:0.16.0'
	integrationTestImplementation 'io.prometheus:simpleclient_hotspot:0.16.0'
	integrationTestImplementation 'io.prometheus:simpleclient_servlet:0.16.0'
	integrationTestImplementation 'io.prometheus:simpleclient_httpserver:0.16.0'
	integrationTestImplementation 'io.prometheus:simpleclient_pushgateway:0.16.0'

	// Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "failed", "skipped"
	}
	finalizedBy jacocoTestReport
}

tasks.register('integrationTest', Test) {
	description = 'Runs the integration tests.'
	group = 'verification'

	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()

	shouldRunAfter test
}

tasks.named('check') {
	dependsOn integrationTest
}

tasks.register("generateAvro", GenerateAvroJavaTask) {
	source("src/main/resources/avro")
	outputDir = file("build/generated-main-avro-java")
}

tasks.register("resolveAvroDependencies", ResolveAvroDependenciesTask) {
	source("src/main/resources/avro")
	outputDir = file("build/avro/resolved")
}

tasks.named("compileJava").configure {
	source(generateAvro)
	source(resolveAvroDependencies)
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = true
		csv.required = true
		html.required = true
		html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
	}
}

build {
	dependsOn jacocoTestReport
}

docker {
	springBootApplication {
		baseImage = 'openjdk:17.0.1-jdk-slim'

		images = ["$build_image_name:latest"]
	}
}

// To build, run gradlew build dockerBuildImage